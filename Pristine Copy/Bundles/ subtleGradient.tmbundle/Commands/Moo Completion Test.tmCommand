<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby
require ENV['TM_SUPPORT_PATH'] + '/lib/ui'
@choices = [
	{'match' =&gt; "$", 'display' =&gt; "$('el:mixed')", 'insert' =&gt; "('el:mixed')"},
	{'match' =&gt; "$E", 'display' =&gt; "$E('selector:string')", 'insert' =&gt; "('selector:string')"},
	{'match' =&gt; "$exec", 'display' =&gt; "$exec('text:string')", 'insert' =&gt; "('text:string')"},
	{'match' =&gt; "$each", 'display' =&gt; "$each(iterable:mixed, function:function, bind:mixed)", 'insert' =&gt; "(iterable:mixed, function:function, bind:mixed)"},
	{'match' =&gt; "$A", 'display' =&gt; "$A(iterable:mixed)", 'insert' =&gt; "(iterable:mixed)"},
	{'match' =&gt; "$H", 'display' =&gt; "$H(object:object)", 'insert' =&gt; "(object:object)"},
	{'match' =&gt; "$type", 'display' =&gt; "$type(obj:mixed)", 'insert' =&gt; "(obj:mixed)"},
	{'match' =&gt; "$try", 'display' =&gt; "$try(function:function, bind:mixed, args:mixed)", 'insert' =&gt; "(function:function, bind:mixed, args:mixed)"},
	{'match' =&gt; "$time", 'display' =&gt; "$time()", 'insert' =&gt; "()"},
	{'match' =&gt; "$splat", 'display' =&gt; "$splat(obj:mixed)", 'insert' =&gt; "(obj:mixed)"},
	{'match' =&gt; "$random", 'display' =&gt; "$random(min:number, max:number)", 'insert' =&gt; "(min:number, max:number)"},
	{'match' =&gt; "$pick", 'display' =&gt; "$pick()", 'insert' =&gt; "()"},
	{'match' =&gt; "$merge", 'display' =&gt; "$merge()", 'insert' =&gt; "()"},
	{'match' =&gt; "$unlink", 'display' =&gt; "$unlink(object:object)", 'insert' =&gt; "(object:object)"},
	{'match' =&gt; "$extend", 'display' =&gt; "$extend(original:object, extension:object)", 'insert' =&gt; "(original:object, extension:object)"},
	{'match' =&gt; "$lambda", 'display' =&gt; "$lambda(value:mixed)", 'insert' =&gt; "(value:mixed)"},
	{'match' =&gt; "$arguments", 'display' =&gt; "$arguments(index:number)", 'insert' =&gt; "(index:number)"},
	{'match' =&gt; "$defined", 'display' =&gt; "$defined(obj:mixed)", 'insert' =&gt; "(obj:mixed)"},
	{'match' =&gt; "$clear", 'display' =&gt; "$clear(timer:timer)", 'insert' =&gt; "(timer:timer)"},
	{'match' =&gt; "$chk", 'display' =&gt; "$chk(obj:mixed)", 'insert' =&gt; "(obj:mixed)"},
	{'match' =&gt; "$empty", 'display' =&gt; "$empty()", 'insert' =&gt; "()"},
	{'match' =&gt; "$HEX", 'display' =&gt; "$HEX('hex:string')", 'insert' =&gt; "('hex:string')"},
	{'match' =&gt; "$HSB", 'display' =&gt; "$HSB(h:number, s:number, b:number)", 'insert' =&gt; "(h:number, s:number, b:number)"},
	{'match' =&gt; "$RGB", 'display' =&gt; "$RGB(r:number, g:number, b:number)", 'insert' =&gt; "(r:number, g:number, b:number)"},
	{'match' =&gt; ".test", 'display' =&gt; "String.test(tester:mixed, '[params:string]')", 'insert' =&gt; "(tester:mixed, '[params:string]')"},
	{'match' =&gt; ".contains", 'display' =&gt; "String.contains('string:string', '[separator:string]')", 'insert' =&gt; "('string:string', '[separator:string]')"},
	{'match' =&gt; ".trim", 'display' =&gt; "String.trim()", 'insert' =&gt; "()"},
	{'match' =&gt; ".clean", 'display' =&gt; "String.clean()", 'insert' =&gt; "()"},
	{'match' =&gt; ".camelCase", 'display' =&gt; "String.camelCase()", 'insert' =&gt; "()"},
	{'match' =&gt; ".hyphenate", 'display' =&gt; "String.hyphenate()", 'insert' =&gt; "()"},
	{'match' =&gt; ".capitalize", 'display' =&gt; "String.capitalize()", 'insert' =&gt; "()"},
	{'match' =&gt; ".escapeRegExp", 'display' =&gt; "String.escapeRegExp()", 'insert' =&gt; "()"},
	{'match' =&gt; ".toInt", 'display' =&gt; "String.toInt(base)", 'insert' =&gt; "(base)"},
	{'match' =&gt; ".toFloat", 'display' =&gt; "String.toFloat()", 'insert' =&gt; "()"},
	{'match' =&gt; ".hexToRgb", 'display' =&gt; "String.hexToRgb([array:array])", 'insert' =&gt; "([array:array])"},
	{'match' =&gt; ".rgbToHex", 'display' =&gt; "String.rgbToHex([array:array])", 'insert' =&gt; "([array:array])"},
	{'match' =&gt; ".rgbToHsb", 'display' =&gt; "String.rgbToHsb()", 'insert' =&gt; "()"},
	{'match' =&gt; ".hsbToRgb", 'display' =&gt; "String.hsbToRgb()", 'insert' =&gt; "()"},
	{'match' =&gt; ".stripScripts", 'display' =&gt; "String.stripScripts([eval:boolean])", 'insert' =&gt; "([eval:boolean])"},
	{'match' =&gt; ".toJSON", 'display' =&gt; "String.toJSON()", 'insert' =&gt; "()"},
	{'match' =&gt; ".extend", 'display' =&gt; "Function.extend(properties:object)", 'insert' =&gt; "(properties:object)"},
	{'match' =&gt; ".run", 'display' =&gt; "Function.run(args:mixed,[ bind:mixed])", 'insert' =&gt; "(args:mixed,[ bind:mixed])"},
	{'match' =&gt; ".create", 'display' =&gt; "Function.create(options:object)", 'insert' =&gt; "(options:object)"},
	{'match' =&gt; ".pass", 'display' =&gt; "Function.pass(args:mixed,[ bind:mixed])", 'insert' =&gt; "(args:mixed,[ bind:mixed])"},
	{'match' =&gt; ".attempt", 'display' =&gt; "Function.attempt(args:mixed,[ bind:mixed])", 'insert' =&gt; "(args:mixed,[ bind:mixed])"},
	{'match' =&gt; ".bind", 'display' =&gt; "Function.bind(bind:mixed,[ args:mixed])", 'insert' =&gt; "(bind:mixed,[ args:mixed])"},
	{'match' =&gt; ".bindWithEvent", 'display' =&gt; "Function.bindWithEvent(bind:mixed,[ args:mixed])", 'insert' =&gt; "(bind:mixed,[ args:mixed])"},
	{'match' =&gt; ".delay", 'display' =&gt; "Function.delay(delay:number,[ bind:mixed, args:mixed])", 'insert' =&gt; "(delay:number,[ bind:mixed, args:mixed])"},
	{'match' =&gt; ".periodical", 'display' =&gt; "Function.periodical(interval:number,[ bind:mixed, args:mixed])", 'insert' =&gt; "(interval:number,[ bind:mixed, args:mixed])"},
	{'match' =&gt; ".include", 'display' =&gt; "Array.include(item:mixed)", 'insert' =&gt; "(item:mixed)"},
	{'match' =&gt; ".remove", 'display' =&gt; "Array.remove(item:mixed)", 'insert' =&gt; "(item:mixed)"},
	{'match' =&gt; ".each", 'display' =&gt; "Array.each(function:function,[ bind:mixed])", 'insert' =&gt; "(function:function,[ bind:mixed])"},
	{'match' =&gt; ".contains", 'display' =&gt; "Array.contains(item:mixed)", 'insert' =&gt; "(item:mixed)"},
	{'match' =&gt; ".map", 'display' =&gt; "Array.map(function:function,[ bind:mixed])", 'insert' =&gt; "(function:function,[ bind:mixed])"},
	{'match' =&gt; ".filter", 'display' =&gt; "Array.filter(function:function,[ bind:mixed])", 'insert' =&gt; "(function:function,[ bind:mixed])"},
	{'match' =&gt; ".every", 'display' =&gt; "Array.every(function:function,[ bind:mixed])", 'insert' =&gt; "(function:function,[ bind:mixed])"},
	{'match' =&gt; ".some", 'display' =&gt; "Array.some(function:function,[ bind:mixed])", 'insert' =&gt; "(function:function,[ bind:mixed])"},
	{'match' =&gt; ".empty", 'display' =&gt; "Array.empty()", 'insert' =&gt; "()"},
	{'match' =&gt; ".flatten", 'display' =&gt; "Array.flatten()", 'insert' =&gt; "()"},
	{'match' =&gt; ".associate", 'display' =&gt; "Array.associate(array:array)", 'insert' =&gt; "(array:array)"},
	{'match' =&gt; ".link", 'display' =&gt; "Array.link(object:object)", 'insert' =&gt; "(object:object)"},
	{'match' =&gt; ".getLast", 'display' =&gt; "Array.getLast()", 'insert' =&gt; "()"},
	{'match' =&gt; ".getRandom", 'display' =&gt; "Array.getRandom()", 'insert' =&gt; "()"},
	{'match' =&gt; ".toJSON", 'display' =&gt; "Array.toJSON()", 'insert' =&gt; "()"},
	{'match' =&gt; ".extend", 'display' =&gt; "Array.extend(array:array)", 'insert' =&gt; "(array:array)"},
	{'match' =&gt; ".merge", 'display' =&gt; "Array.merge(array:array)", 'insert' =&gt; "(array:array)"},
	{'match' =&gt; ".hexToRgb", 'display' =&gt; "Array.hexToRgb(array:array)", 'insert' =&gt; "(array:array)"},
	{'match' =&gt; ".rgbToHex", 'display' =&gt; "Array.rgbToHex(array:array)", 'insert' =&gt; "(array:array)"},
	{'match' =&gt; ".rgbToHsb", 'display' =&gt; "Array.rgbToHsb()", 'insert' =&gt; "()"},
	{'match' =&gt; ".hsbToRgb", 'display' =&gt; "Array.hsbToRgb()", 'insert' =&gt; "()"},
	{'match' =&gt; ".limit", 'display' =&gt; "Number.limit(min:number,[ max:number])", 'insert' =&gt; "(min:number,[ max:number])"},
	{'match' =&gt; ".times", 'display' =&gt; "Number.times(function:function,[ bind:mixed])", 'insert' =&gt; "(function:function,[ bind:mixed])"},
	{'match' =&gt; ".toFloat", 'display' =&gt; "Number.toFloat()", 'insert' =&gt; "()"},
	{'match' =&gt; ".toInt", 'display' =&gt; "Number.toInt([base:number])", 'insert' =&gt; "([base:number])"},
	{'match' =&gt; ".round", 'display' =&gt; "Number.round([precision:number])", 'insert' =&gt; "([precision:number])"},
	{'match' =&gt; ".abs", 'display' =&gt; "Number.abs()", 'insert' =&gt; "()"},
	{'match' =&gt; ".acos", 'display' =&gt; "Number.acos()", 'insert' =&gt; "()"},
	{'match' =&gt; ".asin", 'display' =&gt; "Number.asin()", 'insert' =&gt; "()"},
	{'match' =&gt; ".atan", 'display' =&gt; "Number.atan()", 'insert' =&gt; "()"},
	{'match' =&gt; ".atan2", 'display' =&gt; "Number.atan2()", 'insert' =&gt; "()"},
	{'match' =&gt; ".ceil", 'display' =&gt; "Number.ceil()", 'insert' =&gt; "()"},
	{'match' =&gt; ".cos", 'display' =&gt; "Number.cos()", 'insert' =&gt; "()"},
	{'match' =&gt; ".exp", 'display' =&gt; "Number.exp()", 'insert' =&gt; "()"},
	{'match' =&gt; ".floor", 'display' =&gt; "Number.floor()", 'insert' =&gt; "()"},
	{'match' =&gt; ".log", 'display' =&gt; "Number.log()", 'insert' =&gt; "()"},
	{'match' =&gt; ".max", 'display' =&gt; "Number.max()", 'insert' =&gt; "()"},
	{'match' =&gt; ".min", 'display' =&gt; "Number.min()", 'insert' =&gt; "()"},
	{'match' =&gt; ".pow", 'display' =&gt; "Number.pow()", 'insert' =&gt; "()"},
	{'match' =&gt; ".sin", 'display' =&gt; "Number.sin()", 'insert' =&gt; "()"},
	{'match' =&gt; ".sqrt", 'display' =&gt; "Number.sqrt()", 'insert' =&gt; "()"},
	{'match' =&gt; ".tan", 'display' =&gt; "Number.tan()", 'insert' =&gt; "()"},
	{'match' =&gt; ".toJSON", 'display' =&gt; "Number.toJSON()", 'insert' =&gt; "()"},
	{'match' =&gt; ".contains", 'display' =&gt; "Hash.contains(value:mixed)", 'insert' =&gt; "(value:mixed)"},
	{'match' =&gt; ".keyOf", 'display' =&gt; "Hash.keyOf(value:mixed)", 'insert' =&gt; "(value:mixed)"},
	{'match' =&gt; ".has", 'display' =&gt; "Hash.has('key:string')", 'insert' =&gt; "('key:string')"},
	{'match' =&gt; ".get", 'display' =&gt; "Hash.get('key:string')", 'insert' =&gt; "('key:string')"},
	{'match' =&gt; ".set", 'display' =&gt; "Hash.set('key:string', value:mixed)", 'insert' =&gt; "('key:string', value:mixed)"},
	{'match' =&gt; ".erase", 'display' =&gt; "Hash.erase('key:string')", 'insert' =&gt; "('key:string')"},
	{'match' =&gt; ".include", 'display' =&gt; "Hash.include('key:string', value:mixed)", 'insert' =&gt; "('key:string', value:mixed)"},
	{'match' =&gt; ".each", 'display' =&gt; "Hash.each(function:function,[ bind:mixed])", 'insert' =&gt; "(function:function,[ bind:mixed])"},
	{'match' =&gt; ".map", 'display' =&gt; "Hash.map(function:function,[ bind:mixed])", 'insert' =&gt; "(function:function,[ bind:mixed])"},
	{'match' =&gt; ".filter", 'display' =&gt; "Hash.filter(function:function,[ bind:mixed])", 'insert' =&gt; "(function:function,[ bind:mixed])"},
	{'match' =&gt; ".every", 'display' =&gt; "Hash.every(function:function,[ bind:mixed])", 'insert' =&gt; "(function:function,[ bind:mixed])"},
	{'match' =&gt; ".some", 'display' =&gt; "Hash.some(function:function,[ bind:mixed])", 'insert' =&gt; "(function:function,[ bind:mixed])"},
	{'match' =&gt; ".getKeys", 'display' =&gt; "Hash.getKeys()", 'insert' =&gt; "()"},
	{'match' =&gt; ".getValues", 'display' =&gt; "Hash.getValues()", 'insert' =&gt; "()"},
	{'match' =&gt; ".getLength", 'display' =&gt; "Hash.getLength()", 'insert' =&gt; "()"},
	{'match' =&gt; ".getClean", 'display' =&gt; "Hash.getClean()", 'insert' =&gt; "()"},
	{'match' =&gt; ".toQueryString", 'display' =&gt; "Hash.toQueryString()", 'insert' =&gt; "()"},
	{'match' =&gt; ".toJSON", 'display' =&gt; "Hash.toJSON()", 'insert' =&gt; "()"},
	{'match' =&gt; ".empty", 'display' =&gt; "Hash.empty()", 'insert' =&gt; "()"},
	{'match' =&gt; ".extend", 'display' =&gt; "Hash.extend(properties:object)", 'insert' =&gt; "(properties:object)"},
	{'match' =&gt; ".merge", 'display' =&gt; "Hash.merge(properties:object)", 'insert' =&gt; "(properties:object)"},
	{'match' =&gt; ".getDocument", 'display' =&gt; "Element.getDocument()", 'insert' =&gt; "()"},
	{'match' =&gt; ".getWindow", 'display' =&gt; "Element.getWindow()", 'insert' =&gt; "()"},
	{'match' =&gt; ".constructor", 'display' =&gt; "Element.constructor('tag:string',[ props:object])", 'insert' =&gt; "('tag:string',[ props:object])"},
	{'match' =&gt; ".getElement", 'display' =&gt; "Element.getElement('selector:string')", 'insert' =&gt; "('selector:string')"},
	{'match' =&gt; ".getElements", 'display' =&gt; "Element.getElements('selectors:string')", 'insert' =&gt; "('selectors:string')"},
	{'match' =&gt; ".match", 'display' =&gt; "Element.match('selector:string')", 'insert' =&gt; "('selector:string')"},
	{'match' =&gt; ".set", 'display' =&gt; "Element.set('key:string', value:mixed)", 'insert' =&gt; "('key:string', value:mixed)"},
	{'match' =&gt; ".get", 'display' =&gt; "Element.get('key:string')", 'insert' =&gt; "('key:string')"},
	{'match' =&gt; ".erase", 'display' =&gt; "Element.erase('key:string')", 'insert' =&gt; "('key:string')"},
	{'match' =&gt; ".dispose", 'display' =&gt; "Element.dispose()", 'insert' =&gt; "()"},
	{'match' =&gt; ".inject", 'display' =&gt; "Element.inject(element:element, '[where:string]')", 'insert' =&gt; "(element:element, '[where:string]')"},
	{'match' =&gt; ".wraps", 'display' =&gt; "Element.wraps(element:element, '[where:string]')", 'insert' =&gt; "(element:element, '[where:string]')"},
	{'match' =&gt; ".grab", 'display' =&gt; "Element.grab(element:element, '[where:string]')", 'insert' =&gt; "(element:element, '[where:string]')"},
	{'match' =&gt; ".appendText", 'display' =&gt; "Element.appendText('text:string', '[where:string]')", 'insert' =&gt; "('text:string', '[where:string]')"},
	{'match' =&gt; ".adopt", 'display' =&gt; "Element.adopt(element:element, [element:element, element:element, ...])", 'insert' =&gt; "(element:element, [element:element, element:element, ...])"},
	{'match' =&gt; ".clone", 'display' =&gt; "Element.clone([contents:boolean])", 'insert' =&gt; "([contents:boolean])"},
	{'match' =&gt; ".replaces", 'display' =&gt; "Element.replaces(elelement:element)", 'insert' =&gt; "(elelement:element)"},
	{'match' =&gt; ".hasClass", 'display' =&gt; "Element.hasClass('className:string')", 'insert' =&gt; "('className:string')"},
	{'match' =&gt; ".addClass", 'display' =&gt; "Element.addClass('className:string')", 'insert' =&gt; "('className:string')"},
	{'match' =&gt; ".removeClass", 'display' =&gt; "Element.removeClass('className:string')", 'insert' =&gt; "('className:string')"},
	{'match' =&gt; ".toggleClass", 'display' =&gt; "Element.toggleClass('className:string')", 'insert' =&gt; "('className:string')"},
	{'match' =&gt; ".getComputedStyle", 'display' =&gt; "Element.getComputedStyle('property:string')", 'insert' =&gt; "('property:string')"},
	{'match' =&gt; ".empty", 'display' =&gt; "Element.empty()", 'insert' =&gt; "()"},
	{'match' =&gt; ".destroy", 'display' =&gt; "Element.destroy()", 'insert' =&gt; "()"},
	{'match' =&gt; ".getProperty", 'display' =&gt; "Element.getProperty('attribute:string')", 'insert' =&gt; "('attribute:string')"},
	{'match' =&gt; ".getProperties", 'display' =&gt; "Element.getProperties('attribute:string', '[attribute:string', 'attribute:string', ...])", 'insert' =&gt; "('attribute:string', '[attribute:string', 'attribute:string', ...])"},
	{'match' =&gt; ".setProperty", 'display' =&gt; "Element.setProperty('attribute:string', value:mixed)", 'insert' =&gt; "('attribute:string', value:mixed)"},
	{'match' =&gt; ".setProperties", 'display' =&gt; "Element.setProperties(attributes:object)", 'insert' =&gt; "(attributes:object)"},
	{'match' =&gt; ".removeProperty", 'display' =&gt; "Element.removeProperty('attribute:string')", 'insert' =&gt; "('attribute:string')"},
	{'match' =&gt; ".removeProperties", 'display' =&gt; "Element.removeProperties('attribute:string',[ 'attribute:string', 'attribute:string', ...])", 'insert' =&gt; "('attribute:string',[ 'attribute:string', 'attribute:string', ...])"},
	{'match' =&gt; ".getPrevious", 'display' =&gt; "Element.getPrevious('[match:string]')", 'insert' =&gt; "('[match:string]')"},
	{'match' =&gt; ".getAllPrevious", 'display' =&gt; "Element.getAllPrevious('[match:string]')", 'insert' =&gt; "('[match:string]')"},
	{'match' =&gt; ".getNext", 'display' =&gt; "Element.getNext('[match:string]')", 'insert' =&gt; "('[match:string]')"},
	{'match' =&gt; ".getAllNext", 'display' =&gt; "Element.getAllNext('[match:string]')", 'insert' =&gt; "('[match:string]')"},
	{'match' =&gt; ".getFirst", 'display' =&gt; "Element.getFirst('[match:string]')", 'insert' =&gt; "('[match:string]')"},
	{'match' =&gt; ".getLast", 'display' =&gt; "Element.getLast('[match:string]')", 'insert' =&gt; "('[match:string]')"},
	{'match' =&gt; ".getParent", 'display' =&gt; "Element.getParent('[match:string]')", 'insert' =&gt; "('[match:string]')"},
	{'match' =&gt; ".getParents", 'display' =&gt; "Element.getParents('[match:string]')", 'insert' =&gt; "('[match:string]')"},
	{'match' =&gt; ".getChildren", 'display' =&gt; "Element.getChildren('[match:string]')", 'insert' =&gt; "('[match:string]')"},
	{'match' =&gt; ".hasChild", 'display' =&gt; "Element.hasChild(element:element)", 'insert' =&gt; "(element:element)"},
	{'match' =&gt; ".retrieve", 'display' =&gt; "Element.retrieve('property:string',[ defaultValue:mixed])", 'insert' =&gt; "('property:string',[ defaultValue:mixed])"},
	{'match' =&gt; ".store", 'display' =&gt; "Element.store('key:string', value:mixed)", 'insert' =&gt; "('key:string', value:mixed)"},
	{'match' =&gt; ".eliminate", 'display' =&gt; "Element.eliminate('key:string')", 'insert' =&gt; "('key:string')"},
	{'match' =&gt; ".setStyle", 'display' =&gt; "Element.setStyle('property:string', value:mixed)", 'insert' =&gt; "('property:string', value:mixed)"},
	{'match' =&gt; ".getStyle", 'display' =&gt; "Element.getStyle('property:string')", 'insert' =&gt; "('property:string')"},
	{'match' =&gt; ".setStyles", 'display' =&gt; "Element.setStyles(styles:object)", 'insert' =&gt; "(styles:object)"},
	{'match' =&gt; ".getStyles", 'display' =&gt; "Element.getStyles()", 'insert' =&gt; "()"},
	{'match' =&gt; ".addEvent", 'display' =&gt; "Element.addEvent('type:string', event:function)", 'insert' =&gt; "('type:string', event:function)"},
	{'match' =&gt; ".removeEvent", 'display' =&gt; "Element.removeEvent('type:string', event:function)", 'insert' =&gt; "('type:string', event:function)"},
	{'match' =&gt; ".addEvents", 'display' =&gt; "Element.addEvents(events:object)", 'insert' =&gt; "(events:object)"},
	{'match' =&gt; ".removeEvents", 'display' =&gt; "Element.removeEvents('type:string')", 'insert' =&gt; "('type:string')"},
	{'match' =&gt; ".fireEvent", 'display' =&gt; "Element.fireEvent('type:string', args:mixed)", 'insert' =&gt; "('type:string', args:mixed)"},
	{'match' =&gt; ".cloneEvents", 'display' =&gt; "Element.cloneEvents(from:element, 'type:string')", 'insert' =&gt; "(from:element, 'type:string')"},
	{'match' =&gt; ".tween", 'display' =&gt; "Element.tween('property:string',[ start:number, end:number])", 'insert' =&gt; "('property:string',[ start:number, end:number])"},
	{'match' =&gt; ".fade", 'display' =&gt; "Element.fade([how:mixed])", 'insert' =&gt; "([how:mixed])"},
	{'match' =&gt; ".highlight", 'display' =&gt; "Element.highlight([color:mixed])", 'insert' =&gt; "([color:mixed])"},
	{'match' =&gt; ".morph", 'display' =&gt; "Element.morph(properties:object)", 'insert' =&gt; "(properties:object)"},
	{'match' =&gt; ".slide", 'display' =&gt; "Element.slide([how:mixed])", 'insert' =&gt; "([how:mixed])"},
	{'match' =&gt; ".send", 'display' =&gt; "Element.send('[url:string]')", 'insert' =&gt; "('[url:string]')"},
	{'match' =&gt; ".load", 'display' =&gt; "Element.load('[url:string]')", 'insert' =&gt; "('[url:string]')"},
	{'match' =&gt; ".positioned", 'display' =&gt; "Element.positioned()", 'insert' =&gt; "()"},
	{'match' =&gt; ".getOffsetParent", 'display' =&gt; "Element.getOffsetParent()", 'insert' =&gt; "()"},
	{'match' =&gt; ".getOffsetSize", 'display' =&gt; "Element.getOffsetSize()", 'insert' =&gt; "()"},
	{'match' =&gt; ".getScrollSize", 'display' =&gt; "Element.getScrollSize()", 'insert' =&gt; "()"},
	{'match' =&gt; ".getScroll", 'display' =&gt; "Element.getScroll()", 'insert' =&gt; "()"},
	{'match' =&gt; ".getPosition", 'display' =&gt; "Element.getPosition()", 'insert' =&gt; "()"},
	{'match' =&gt; ".getRelativePosition", 'display' =&gt; "Element.getRelativePosition()", 'insert' =&gt; "()"},
	{'match' =&gt; ".getCoordinates", 'display' =&gt; "Element.getCoordinates()", 'insert' =&gt; "()"},
	{'match' =&gt; ".scrollTo", 'display' =&gt; "Element.scrollTo(x:number, y:number)", 'insert' =&gt; "(x:number, y:number)"},
	{'match' =&gt; ".computePosition", 'display' =&gt; "Element.computePosition(object:object,[ client:boolean])", 'insert' =&gt; "(object:object,[ client:boolean])"},
	{'match' =&gt; ".position", 'display' =&gt; "Element.position(object:object,[ client:boolean])", 'insert' =&gt; "(object:object,[ client:boolean])"},
	{'match' =&gt; ".makeResizable", 'display' =&gt; "Element.makeResizable([options:object])", 'insert' =&gt; "([options:object])"},
	{'match' =&gt; ".makeDraggable", 'display' =&gt; "Element.makeDraggable([options:object])", 'insert' =&gt; "([options:object])"},
	{'match' =&gt; ".toQueryString", 'display' =&gt; "Element.toQueryString()", 'insert' =&gt; "()"},
	{'match' =&gt; '.target', 'display' =&gt; 'Event.target'},
	{'match' =&gt; '.relatedTarget', 'display' =&gt; 'Event.relatedTarget'},
	{'match' =&gt; '.client.x', 'display' =&gt; 'Event.client.x'},
	{'match' =&gt; '.client.y', 'display' =&gt; 'Event.client.y'},
	{'match' =&gt; '.page.x', 'display' =&gt; 'Event.page.x'},
	{'match' =&gt; '.page.y', 'display' =&gt; 'Event.page.y'},
	{'match' =&gt; '.key', 'display' =&gt; 'Event.key'},
	{'match' =&gt; '.shift', 'display' =&gt; 'Event.shift'},
	{'match' =&gt; '.control', 'display' =&gt; 'Event.control'},
	{'match' =&gt; '.alt', 'display' =&gt; 'Event.alt'},
	{'match' =&gt; '.meta', 'display' =&gt; 'Event.meta'},
	{'match' =&gt; '.wheel', 'display' =&gt; 'Event.wheel'},
	{'match' =&gt; ".stop", 'display' =&gt; "Event.stop()", 'insert' =&gt; "()"},
	{'match' =&gt; ".stopPropagation", 'display' =&gt; "Event.stopPropagation()", 'insert' =&gt; "()"},
	{'match' =&gt; ".preventDefault", 'display' =&gt; "Event.preventDefault()", 'insert' =&gt; "()"},
	{'match' =&gt; ".getDocument", 'display' =&gt; "Window.getDocument()", 'insert' =&gt; "()"},
	{'match' =&gt; ".getWindow", 'display' =&gt; "Window.getWindow()", 'insert' =&gt; "()"},
	{'match' =&gt; ".retrieve", 'display' =&gt; "Window.retrieve('property:string',[ defaultValue:mixed])", 'insert' =&gt; "('property:string',[ defaultValue:mixed])"},
	{'match' =&gt; ".store", 'display' =&gt; "Window.store('key:string', value:mixed)", 'insert' =&gt; "('key:string', value:mixed)"},
	{'match' =&gt; ".eliminate", 'display' =&gt; "Window.eliminate('key:string')", 'insert' =&gt; "('key:string')"},
	{'match' =&gt; ".addEvent", 'display' =&gt; "Window.addEvent('type:string', event:function)", 'insert' =&gt; "('type:string', event:function)"},
	{'match' =&gt; ".removeEvent", 'display' =&gt; "Window.removeEvent('type:string', event:function)", 'insert' =&gt; "('type:string', event:function)"},
	{'match' =&gt; ".addEvents", 'display' =&gt; "Window.addEvents(events:object)", 'insert' =&gt; "(events:object)"},
	{'match' =&gt; ".removeEvents", 'display' =&gt; "Window.removeEvents('type:string')", 'insert' =&gt; "('type:string')"},
	{'match' =&gt; ".fireEvent", 'display' =&gt; "Window.fireEvent('type:string', args:mixed)", 'insert' =&gt; "('type:string', args:mixed)"},
	{'match' =&gt; ".cloneEvents", 'display' =&gt; "Window.cloneEvents(from:element, 'type:string')", 'insert' =&gt; "(from:element, 'type:string')"},
	{'match' =&gt; ".getDocument", 'display' =&gt; "Document.getDocument()", 'insert' =&gt; "()"},
	{'match' =&gt; ".getWindow", 'display' =&gt; "Document.getWindow()", 'insert' =&gt; "()"},
	{'match' =&gt; ".newElement", 'display' =&gt; "Document.newElement('tag:string',[ props:object])", 'insert' =&gt; "('tag:string',[ props:object])"},
	{'match' =&gt; ".newTextNode", 'display' =&gt; "Document.newTextNode('text:string')", 'insert' =&gt; "('text:string')"},
	{'match' =&gt; ".getElement", 'display' =&gt; "Document.getElement('selector:string')", 'insert' =&gt; "('selector:string')"},
	{'match' =&gt; ".getElements", 'display' =&gt; "Document.getElements('selectors:string')", 'insert' =&gt; "('selectors:string')"},
	{'match' =&gt; ".retrieve", 'display' =&gt; "Document.retrieve('property:string',[ defaultValue:mixed])", 'insert' =&gt; "('property:string',[ defaultValue:mixed])"},
	{'match' =&gt; ".store", 'display' =&gt; "Document.store('key:string', value:mixed)", 'insert' =&gt; "('key:string', value:mixed)"},
	{'match' =&gt; ".eliminate", 'display' =&gt; "Document.eliminate('key:string')", 'insert' =&gt; "('key:string')"},
	{'match' =&gt; ".addEvent", 'display' =&gt; "Document.addEvent('type:string', event:function)", 'insert' =&gt; "('type:string', event:function)"},
	{'match' =&gt; ".removeEvent", 'display' =&gt; "Document.removeEvent('type:string', event:function)", 'insert' =&gt; "('type:string', event:function)"},
	{'match' =&gt; ".addEvents", 'display' =&gt; "Document.addEvents(events:object)", 'insert' =&gt; "(events:object)"},
	{'match' =&gt; ".removeEvents", 'display' =&gt; "Document.removeEvents('type:string')", 'insert' =&gt; "('type:string')"},
	{'match' =&gt; ".fireEvent", 'display' =&gt; "Document.fireEvent('type:string', args:mixed)", 'insert' =&gt; "('type:string', args:mixed)"},
	{'match' =&gt; ".cloneEvents", 'display' =&gt; "Document.cloneEvents(from:element, 'type:string')", 'insert' =&gt; "(from:element, 'type:string')"},
	{'match' =&gt; ".getOffsetSize", 'display' =&gt; "Document.getOffsetSize()", 'insert' =&gt; "()"},
	{'match' =&gt; ".getScrollSize", 'display' =&gt; "Document.getScrollSize()", 'insert' =&gt; "()"},
	{'match' =&gt; ".getScroll", 'display' =&gt; "Document.getScroll()", 'insert' =&gt; "()"},
	{'match' =&gt; ".scrollTo", 'display' =&gt; "Document.scrollTo(x:number, y:number)", 'insert' =&gt; "(x:number, y:number)"},
	{'match' =&gt; ".test", 'display' =&gt; "test(tester:mixed,[ 'params:string]')", 'insert' =&gt; "(tester:mixed,[ 'params:string]')"},
	{'match' =&gt; ".contains", 'display' =&gt; "contains('string:string', '[separator:string]')", 'insert' =&gt; "('string:string', '[separator:string]')"},
	{'match' =&gt; ".trim", 'display' =&gt; "trim()", 'insert' =&gt; "()"},
	{'match' =&gt; ".clean", 'display' =&gt; "clean()", 'insert' =&gt; "()"},
	{'match' =&gt; ".camelCase", 'display' =&gt; "camelCase()", 'insert' =&gt; "()"},
	{'match' =&gt; ".hyphenate", 'display' =&gt; "hyphenate()", 'insert' =&gt; "()"},
	{'match' =&gt; ".capitalize", 'display' =&gt; "capitalize()", 'insert' =&gt; "()"},
	{'match' =&gt; ".escapeRegExp", 'display' =&gt; "escapeRegExp()", 'insert' =&gt; "()"},
	{'match' =&gt; ".toInt", 'display' =&gt; "toInt(base)", 'insert' =&gt; "(base)"},
	{'match' =&gt; ".toFloat", 'display' =&gt; "toFloat()", 'insert' =&gt; "()"},
	{'match' =&gt; ".hexToRgb", 'display' =&gt; "hexToRgb([array:array])", 'insert' =&gt; "([array:array])"},
	{'match' =&gt; ".rgbToHex", 'display' =&gt; "rgbToHex([array:array])", 'insert' =&gt; "([array:array])"},
	{'match' =&gt; ".rgbToHsb", 'display' =&gt; "rgbToHsb()", 'insert' =&gt; "()"},
	{'match' =&gt; ".hsbToRgb", 'display' =&gt; "hsbToRgb()", 'insert' =&gt; "()"},
	{'match' =&gt; ".stripScripts", 'display' =&gt; "stripScripts([eval:boolean])", 'insert' =&gt; "([eval:boolean])"},
	{'match' =&gt; ".toJSON", 'display' =&gt; "toJSON()", 'insert' =&gt; "()"},
	{'match' =&gt; ".extend", 'display' =&gt; "extend(properties:object)", 'insert' =&gt; "(properties:object)"},
	{'match' =&gt; ".run", 'display' =&gt; "run(args:mixed,[ bind:mixed])", 'insert' =&gt; "(args:mixed,[ bind:mixed])"},
	{'match' =&gt; ".create", 'display' =&gt; "create(options:object)", 'insert' =&gt; "(options:object)"},
	{'match' =&gt; ".pass", 'display' =&gt; "pass(args:mixed,[ bind:mixed])", 'insert' =&gt; "(args:mixed,[ bind:mixed])"},
	{'match' =&gt; ".attempt", 'display' =&gt; "attempt(args:mixed,[ bind:mixed])", 'insert' =&gt; "(args:mixed,[ bind:mixed])"},
	{'match' =&gt; ".bind", 'display' =&gt; "bind(bind:mixed,[ args:mixed])", 'insert' =&gt; "(bind:mixed,[ args:mixed])"},
	{'match' =&gt; ".bindWithEvent", 'display' =&gt; "bindWithEvent(bind:mixed,[ args:mixed])", 'insert' =&gt; "(bind:mixed,[ args:mixed])"},
	{'match' =&gt; ".delay", 'display' =&gt; "delay(delay:number,[ bind:mixed, args:mixed])", 'insert' =&gt; "(delay:number,[ bind:mixed, args:mixed])"},
	{'match' =&gt; ".periodical", 'display' =&gt; "periodical(interval:number,[ bind:mixed, args:mixed])", 'insert' =&gt; "(interval:number,[ bind:mixed, args:mixed])"},
	{'match' =&gt; ".include", 'display' =&gt; "include(item:mixed)", 'insert' =&gt; "(item:mixed)"},
	{'match' =&gt; ".remove", 'display' =&gt; "remove(item:mixed)", 'insert' =&gt; "(item:mixed)"},
	{'match' =&gt; ".each", 'display' =&gt; "each(function:function,[ bind:mixed])", 'insert' =&gt; "(function:function,[ bind:mixed])"},
	{'match' =&gt; ".contains", 'display' =&gt; "contains(item:mixed)", 'insert' =&gt; "(item:mixed)"},
	{'match' =&gt; ".map", 'display' =&gt; "map(function:function,[ bind:mixed])", 'insert' =&gt; "(function:function,[ bind:mixed])"},
	{'match' =&gt; ".filter", 'display' =&gt; "filter(function:function,[ bind:mixed])", 'insert' =&gt; "(function:function,[ bind:mixed])"},
	{'match' =&gt; ".every", 'display' =&gt; "every(function:function,[ bind:mixed])", 'insert' =&gt; "(function:function,[ bind:mixed])"},
	{'match' =&gt; ".some", 'display' =&gt; "some(function:function,[ bind:mixed])", 'insert' =&gt; "(function:function,[ bind:mixed])"},
	{'match' =&gt; ".empty", 'display' =&gt; "empty()", 'insert' =&gt; "()"},
	{'match' =&gt; ".flatten", 'display' =&gt; "flatten()", 'insert' =&gt; "()"},
	{'match' =&gt; ".associate", 'display' =&gt; "associate(array:array)", 'insert' =&gt; "(array:array)"},
	{'match' =&gt; ".link", 'display' =&gt; "link(object:object)", 'insert' =&gt; "(object:object)"},
	{'match' =&gt; ".getLast", 'display' =&gt; "getLast()", 'insert' =&gt; "()"},
	{'match' =&gt; ".getRandom", 'display' =&gt; "getRandom()", 'insert' =&gt; "()"},
	{'match' =&gt; ".toJSON", 'display' =&gt; "toJSON()", 'insert' =&gt; "()"},
	{'match' =&gt; ".extend", 'display' =&gt; "extend(array:array)", 'insert' =&gt; "(array:array)"},
	{'match' =&gt; ".merge", 'display' =&gt; "merge(array:array)", 'insert' =&gt; "(array:array)"},
	{'match' =&gt; ".hexToRgb", 'display' =&gt; "hexToRgb(array:array)", 'insert' =&gt; "(array:array)"},
	{'match' =&gt; ".rgbToHex", 'display' =&gt; "rgbToHex(array:array)", 'insert' =&gt; "(array:array)"},
	{'match' =&gt; ".rgbToHsb", 'display' =&gt; "rgbToHsb()", 'insert' =&gt; "()"},
	{'match' =&gt; ".hsbToRgb", 'display' =&gt; "hsbToRgb()", 'insert' =&gt; "()"},
	{'match' =&gt; ".limit", 'display' =&gt; "limit(min:number,[ max:number])", 'insert' =&gt; "(min:number,[ max:number])"},
	{'match' =&gt; ".times", 'display' =&gt; "times(function:function,[ bind:mixed])", 'insert' =&gt; "(function:function,[ bind:mixed])"},
	{'match' =&gt; ".toFloat", 'display' =&gt; "toFloat()", 'insert' =&gt; "()"},
	{'match' =&gt; ".toInt", 'display' =&gt; "toInt([base:number])", 'insert' =&gt; "([base:number])"},
	{'match' =&gt; ".round", 'display' =&gt; "round([precision:number])", 'insert' =&gt; "([precision:number])"},
	{'match' =&gt; ".abs", 'display' =&gt; "abs()", 'insert' =&gt; "()"},
	{'match' =&gt; ".acos", 'display' =&gt; "acos()", 'insert' =&gt; "()"},
	{'match' =&gt; ".asin", 'display' =&gt; "asin()", 'insert' =&gt; "()"},
	{'match' =&gt; ".atan", 'display' =&gt; "atan()", 'insert' =&gt; "()"},
	{'match' =&gt; ".atan2", 'display' =&gt; "atan2()", 'insert' =&gt; "()"},
	{'match' =&gt; ".ceil", 'display' =&gt; "ceil()", 'insert' =&gt; "()"},
	{'match' =&gt; ".cos", 'display' =&gt; "cos()", 'insert' =&gt; "()"},
	{'match' =&gt; ".exp", 'display' =&gt; "exp()", 'insert' =&gt; "()"},
	{'match' =&gt; ".floor", 'display' =&gt; "floor()", 'insert' =&gt; "()"},
	{'match' =&gt; ".log", 'display' =&gt; "log()", 'insert' =&gt; "()"},
	{'match' =&gt; ".max", 'display' =&gt; "max()", 'insert' =&gt; "()"},
	{'match' =&gt; ".min", 'display' =&gt; "min()", 'insert' =&gt; "()"},
	{'match' =&gt; ".pow", 'display' =&gt; "pow()", 'insert' =&gt; "()"},
	{'match' =&gt; ".sin", 'display' =&gt; "sin()", 'insert' =&gt; "()"},
	{'match' =&gt; ".sqrt", 'display' =&gt; "sqrt()", 'insert' =&gt; "()"},
	{'match' =&gt; ".tan", 'display' =&gt; "tan()", 'insert' =&gt; "()"},
	{'match' =&gt; ".toJSON", 'display' =&gt; "toJSON()", 'insert' =&gt; "()"},
	{'match' =&gt; ".contains", 'display' =&gt; "contains(value:mixed)", 'insert' =&gt; "(value:mixed)"},
	{'match' =&gt; ".keyOf", 'display' =&gt; "keyOf(value:mixed)", 'insert' =&gt; "(value:mixed)"},
	{'match' =&gt; ".has", 'display' =&gt; "has('key:string')", 'insert' =&gt; "('key:string')"},
	{'match' =&gt; ".get", 'display' =&gt; "get('key:string')", 'insert' =&gt; "('key:string')"},
	{'match' =&gt; ".set", 'display' =&gt; "set('key:string', value:mixed)", 'insert' =&gt; "('key:string', value:mixed)"},
	{'match' =&gt; ".erase", 'display' =&gt; "erase('key:string')", 'insert' =&gt; "('key:string')"},
	{'match' =&gt; ".include", 'display' =&gt; "include('key:string', value:mixed)", 'insert' =&gt; "('key:string', value:mixed)"},
	{'match' =&gt; ".each", 'display' =&gt; "each(function:function,[ bind:mixed])", 'insert' =&gt; "(function:function,[ bind:mixed])"},
	{'match' =&gt; ".map", 'display' =&gt; "map(function:function,[ bind:mixed])", 'insert' =&gt; "(function:function,[ bind:mixed])"},
	{'match' =&gt; ".filter", 'display' =&gt; "filter(function:function,[ bind:mixed])", 'insert' =&gt; "(function:function,[ bind:mixed])"},
	{'match' =&gt; ".every", 'display' =&gt; "every(function:function,[ bind:mixed])", 'insert' =&gt; "(function:function,[ bind:mixed])"},
	{'match' =&gt; ".some", 'display' =&gt; "some(function:function,[ bind:mixed])", 'insert' =&gt; "(function:function,[ bind:mixed])"},
	{'match' =&gt; ".getKeys", 'display' =&gt; "getKeys()", 'insert' =&gt; "()"},
	{'match' =&gt; ".getValues", 'display' =&gt; "getValues()", 'insert' =&gt; "()"},
	{'match' =&gt; ".getLength", 'display' =&gt; "getLength()", 'insert' =&gt; "()"},
	{'match' =&gt; ".getClean", 'display' =&gt; "getClean()", 'insert' =&gt; "()"},
	{'match' =&gt; ".toQueryString", 'display' =&gt; "toQueryString()", 'insert' =&gt; "()"},
	{'match' =&gt; ".toJSON", 'display' =&gt; "toJSON()", 'insert' =&gt; "()"},
	{'match' =&gt; ".empty", 'display' =&gt; "empty()", 'insert' =&gt; "()"},
	{'match' =&gt; ".extend", 'display' =&gt; "extend(properties:object)", 'insert' =&gt; "(properties:object)"},
	{'match' =&gt; ".merge", 'display' =&gt; "merge(properties:object)", 'insert' =&gt; "(properties:object)"},
	{'match' =&gt; ".getDocument", 'display' =&gt; "getDocument()", 'insert' =&gt; "()"},
	{'match' =&gt; ".getWindow", 'display' =&gt; "getWindow()", 'insert' =&gt; "()"},
	{'match' =&gt; ".constructor", 'display' =&gt; "constructor('tag:string',[ props:object])", 'insert' =&gt; "('tag:string',[ props:object])"},
	{'match' =&gt; ".getElement", 'display' =&gt; "getElement('selector:string')", 'insert' =&gt; "('selector:string')"},
	{'match' =&gt; ".getElements", 'display' =&gt; "getElements('selectors:string')", 'insert' =&gt; "('selectors:string')"},
	{'match' =&gt; ".match", 'display' =&gt; "match('selector:string')", 'insert' =&gt; "('selector:string')"},
	{'match' =&gt; ".set", 'display' =&gt; "set('key:string', value:mixed)", 'insert' =&gt; "('key:string', value:mixed)"},
	{'match' =&gt; ".get", 'display' =&gt; "get('key:string')", 'insert' =&gt; "('key:string')"},
	{'match' =&gt; ".erase", 'display' =&gt; "erase('key:string')", 'insert' =&gt; "('key:string')"},
	{'match' =&gt; ".dispose", 'display' =&gt; "dispose()", 'insert' =&gt; "()"},
	{'match' =&gt; ".inject", 'display' =&gt; "inject(element:element, '[where:string]')", 'insert' =&gt; "(element:element, '[where:string]')"},
	{'match' =&gt; ".wraps", 'display' =&gt; "wraps(element:element, '[where:string]')", 'insert' =&gt; "(element:element, '[where:string]')"},
	{'match' =&gt; ".grab", 'display' =&gt; "grab(element:element, '[where:string]')", 'insert' =&gt; "(element:element, '[where:string]')"},
	{'match' =&gt; ".appendText", 'display' =&gt; "appendText('text:string', '[where:string]')", 'insert' =&gt; "('text:string', '[where:string]')"},
	{'match' =&gt; ".adopt", 'display' =&gt; "adopt(element:element, [element:element, element:element, ...])", 'insert' =&gt; "(element:element, [element:element, element:element, ...])"},
	{'match' =&gt; ".clone", 'display' =&gt; "clone([contents:boolean])", 'insert' =&gt; "([contents:boolean])"},
	{'match' =&gt; ".replaces", 'display' =&gt; "replaces(elelement:element)", 'insert' =&gt; "(elelement:element)"},
	{'match' =&gt; ".hasClass", 'display' =&gt; "hasClass('className:string')", 'insert' =&gt; "('className:string')"},
	{'match' =&gt; ".addClass", 'display' =&gt; "addClass('className:string')", 'insert' =&gt; "('className:string')"},
	{'match' =&gt; ".removeClass", 'display' =&gt; "removeClass('className:string')", 'insert' =&gt; "('className:string')"},
	{'match' =&gt; ".toggleClass", 'display' =&gt; "toggleClass('className:string')", 'insert' =&gt; "('className:string')"},
	{'match' =&gt; ".getComputedStyle", 'display' =&gt; "getComputedStyle('property:string')", 'insert' =&gt; "('property:string')"},
	{'match' =&gt; ".empty", 'display' =&gt; "empty()", 'insert' =&gt; "()"},
	{'match' =&gt; ".destroy", 'display' =&gt; "destroy()", 'insert' =&gt; "()"},
	{'match' =&gt; ".getProperty", 'display' =&gt; "getProperty('attribute:string')", 'insert' =&gt; "('attribute:string')"},
	{'match' =&gt; ".getProperties", 'display' =&gt; "getProperties('attribute:string',[ 'attribute:string', 'attribute:string', ...])", 'insert' =&gt; "('attribute:string',[ 'attribute:string', 'attribute:string', ...])"},
	{'match' =&gt; ".setProperty", 'display' =&gt; "setProperty('attribute:string', value:mixed)", 'insert' =&gt; "('attribute:string', value:mixed)"},
	{'match' =&gt; ".setProperties", 'display' =&gt; "setProperties(attributes:object)", 'insert' =&gt; "(attributes:object)"},
	{'match' =&gt; ".removeProperty", 'display' =&gt; "removeProperty('attribute:string')", 'insert' =&gt; "('attribute:string')"},
	{'match' =&gt; ".removeProperties", 'display' =&gt; "removeProperties('attribute:string',[ 'attribute:string', 'attribute:string', ...])", 'insert' =&gt; "('attribute:string',[ 'attribute:string', 'attribute:string', ...])"},
	{'match' =&gt; ".getPrevious", 'display' =&gt; "getPrevious('[match:string]')", 'insert' =&gt; "('[match:string]')"},
	{'match' =&gt; ".getAllPrevious", 'display' =&gt; "getAllPrevious('[match:string]')", 'insert' =&gt; "('[match:string]')"},
	{'match' =&gt; ".getNext", 'display' =&gt; "getNext('[match:string]')", 'insert' =&gt; "('[match:string]')"},
	{'match' =&gt; ".getAllNext", 'display' =&gt; "getAllNext('[match:string]')", 'insert' =&gt; "('[match:string]')"},
	{'match' =&gt; ".getFirst", 'display' =&gt; "getFirst('[match:string]')", 'insert' =&gt; "('[match:string]')"},
	{'match' =&gt; ".getLast", 'display' =&gt; "getLast('[match:string]')", 'insert' =&gt; "('[match:string]')"},
	{'match' =&gt; ".getParent", 'display' =&gt; "getParent('[match:string]')", 'insert' =&gt; "('[match:string]')"},
	{'match' =&gt; ".getParents", 'display' =&gt; "getParents('[match:string]')", 'insert' =&gt; "('[match:string]')"},
	{'match' =&gt; ".getChildren", 'display' =&gt; "getChildren('[match:string]')", 'insert' =&gt; "('[match:string]')"},
	{'match' =&gt; ".hasChild", 'display' =&gt; "hasChild(element:element)", 'insert' =&gt; "(element:element)"},
	{'match' =&gt; ".retrieve", 'display' =&gt; "retrieve('property:string',[ defaultValue:mixed])", 'insert' =&gt; "('property:string',[ defaultValue:mixed])"},
	{'match' =&gt; ".store", 'display' =&gt; "store('key:string', value:mixed)", 'insert' =&gt; "('key:string', value:mixed)"},
	{'match' =&gt; ".eliminate", 'display' =&gt; "eliminate('key:string')", 'insert' =&gt; "('key:string')"},
	{'match' =&gt; ".setStyle", 'display' =&gt; "setStyle('property:string', value:mixed)", 'insert' =&gt; "('property:string', value:mixed)"},
	{'match' =&gt; ".getStyle", 'display' =&gt; "getStyle('property:string')", 'insert' =&gt; "('property:string')"},
	{'match' =&gt; ".setStyles", 'display' =&gt; "setStyles(styles:object)", 'insert' =&gt; "(styles:object)"},
	{'match' =&gt; ".getStyles", 'display' =&gt; "getStyles()", 'insert' =&gt; "()"},
	{'match' =&gt; ".addEvent", 'display' =&gt; "addEvent('type:string', event:function)", 'insert' =&gt; "('type:string', event:function)"},
	{'match' =&gt; ".removeEvent", 'display' =&gt; "removeEvent('type:string', event:function)", 'insert' =&gt; "('type:string', event:function)"},
	{'match' =&gt; ".addEvents", 'display' =&gt; "addEvents(events:object)", 'insert' =&gt; "(events:object)"},
	{'match' =&gt; ".removeEvents", 'display' =&gt; "removeEvents('type:string')", 'insert' =&gt; "('type:string')"},
	{'match' =&gt; ".fireEvent", 'display' =&gt; "fireEvent('type:string', args:mixed)", 'insert' =&gt; "('type:string', args:mixed)"},
	{'match' =&gt; ".cloneEvents", 'display' =&gt; "cloneEvents(from:element, 'type:string')", 'insert' =&gt; "(from:element, 'type:string')"},
	{'match' =&gt; ".tween", 'display' =&gt; "tween('property:string',[ start:number, end:number])", 'insert' =&gt; "('property:string',[ start:number, end:number])"},
	{'match' =&gt; ".fade", 'display' =&gt; "fade([how:mixed])", 'insert' =&gt; "([how:mixed])"},
	{'match' =&gt; ".highlight", 'display' =&gt; "highlight([color:mixed])", 'insert' =&gt; "([color:mixed])"},
	{'match' =&gt; ".morph", 'display' =&gt; "morph(properties:object)", 'insert' =&gt; "(properties:object)"},
	{'match' =&gt; ".slide", 'display' =&gt; "slide([how:mixed])", 'insert' =&gt; "([how:mixed])"},
	{'match' =&gt; ".send", 'display' =&gt; "send('[url:string]')", 'insert' =&gt; "('[url:string]')"},
	{'match' =&gt; ".load", 'display' =&gt; "load('[url:string]')", 'insert' =&gt; "('[url:string]')"},
	{'match' =&gt; ".positioned", 'display' =&gt; "positioned()", 'insert' =&gt; "()"},
	{'match' =&gt; ".getOffsetParent", 'display' =&gt; "getOffsetParent()", 'insert' =&gt; "()"},
	{'match' =&gt; ".getOffsetSize", 'display' =&gt; "getOffsetSize()", 'insert' =&gt; "()"},
	{'match' =&gt; ".getScrollSize", 'display' =&gt; "getScrollSize()", 'insert' =&gt; "()"},
	{'match' =&gt; ".getScroll", 'display' =&gt; "getScroll()", 'insert' =&gt; "()"},
	{'match' =&gt; ".getPosition", 'display' =&gt; "getPosition()", 'insert' =&gt; "()"},
	{'match' =&gt; ".getRelativePosition", 'display' =&gt; "getRelativePosition()", 'insert' =&gt; "()"},
	{'match' =&gt; ".getCoordinates", 'display' =&gt; "getCoordinates()", 'insert' =&gt; "()"},
	{'match' =&gt; ".scrollTo", 'display' =&gt; "scrollTo(x:number, y:number)", 'insert' =&gt; "(x:number, y:number)"},
	{'match' =&gt; ".computePosition", 'display' =&gt; "computePosition(object:object,[ client:boolean])", 'insert' =&gt; "(object:object,[ client:boolean])"},
	{'match' =&gt; ".position", 'display' =&gt; "position(object:object,[ client:boolean])", 'insert' =&gt; "(object:object,[ client:boolean])"},
	{'match' =&gt; ".makeResizable", 'display' =&gt; "makeResizable([options:object])", 'insert' =&gt; "([options:object])"},
	{'match' =&gt; ".makeDraggable", 'display' =&gt; "makeDraggable([options:object])", 'insert' =&gt; "([options:object])"},
	{'match' =&gt; ".toQueryString", 'display' =&gt; "toQueryString()", 'insert' =&gt; "()"},
	{'match' =&gt; '.target', 'display' =&gt; 'target'},
	{'match' =&gt; '.relatedTarget', 'display' =&gt; 'relatedTarget'},
	{'match' =&gt; '.client.x', 'display' =&gt; 'client.x'},
	{'match' =&gt; '.client.y', 'display' =&gt; 'client.y'},
	{'match' =&gt; '.page.x', 'display' =&gt; 'page.x'},
	{'match' =&gt; '.page.y', 'display' =&gt; 'page.y'},
	{'match' =&gt; '.key', 'display' =&gt; 'key'},
	{'match' =&gt; '.shift', 'display' =&gt; 'shift'},
	{'match' =&gt; '.control', 'display' =&gt; 'control'},
	{'match' =&gt; '.alt', 'display' =&gt; 'alt'},
	{'match' =&gt; '.meta', 'display' =&gt; 'meta'},
	{'match' =&gt; '.wheel', 'display' =&gt; 'wheel'},
	{'match' =&gt; ".stop", 'display' =&gt; "stop()", 'insert' =&gt; "()"},
	{'match' =&gt; ".stopPropagation", 'display' =&gt; "stopPropagation()", 'insert' =&gt; "()"},
	{'match' =&gt; ".preventDefault", 'display' =&gt; "preventDefault()", 'insert' =&gt; "()"},
	{'match' =&gt; ".getDocument", 'display' =&gt; "getDocument()", 'insert' =&gt; "()"},
	{'match' =&gt; ".getWindow", 'display' =&gt; "getWindow()", 'insert' =&gt; "()"},
	{'match' =&gt; ".retrieve", 'display' =&gt; "retrieve('property:string',[ defaultValue:mixed])", 'insert' =&gt; "('property:string',[ defaultValue:mixed])"},
	{'match' =&gt; ".store", 'display' =&gt; "store('key:string', value:mixed)", 'insert' =&gt; "('key:string', value:mixed)"},
	{'match' =&gt; ".eliminate", 'display' =&gt; "eliminate('key:string')", 'insert' =&gt; "('key:string')"},
	{'match' =&gt; ".addEvent", 'display' =&gt; "addEvent('type:string', event:function)", 'insert' =&gt; "('type:string', event:function)"},
	{'match' =&gt; ".removeEvent", 'display' =&gt; "removeEvent('type:string', event:function)", 'insert' =&gt; "('type:string', event:function)"},
	{'match' =&gt; ".addEvents", 'display' =&gt; "addEvents(events:object)", 'insert' =&gt; "(events:object)"},
	{'match' =&gt; ".removeEvents", 'display' =&gt; "removeEvents('type:string')", 'insert' =&gt; "('type:string')"},
	{'match' =&gt; ".fireEvent", 'display' =&gt; "fireEvent('type:string', args:mixed)", 'insert' =&gt; "('type:string', args:mixed)"},
	{'match' =&gt; ".cloneEvents", 'display' =&gt; "cloneEvents(from:element, 'type:string')", 'insert' =&gt; "(from:element, 'type:string')"},
	{'match' =&gt; ".getDocument", 'display' =&gt; "getDocument()", 'insert' =&gt; "()"},
	{'match' =&gt; ".getWindow", 'display' =&gt; "getWindow()", 'insert' =&gt; "()"},
	{'match' =&gt; ".newElement", 'display' =&gt; "newElement('tag:string',[ props:object])", 'insert' =&gt; "('tag:string',[ props:object])"},
	{'match' =&gt; ".newTextNode", 'display' =&gt; "newTextNode('text:string')", 'insert' =&gt; "('text:string')"},
	{'match' =&gt; ".getElement", 'display' =&gt; "getElement('selector:string')", 'insert' =&gt; "('selector:string')"},
	{'match' =&gt; ".getElements", 'display' =&gt; "getElements('selectors:string')", 'insert' =&gt; "('selectors:string')"},
	{'match' =&gt; ".retrieve", 'display' =&gt; "retrieve('property:string',[ defaultValue:mixed])", 'insert' =&gt; "('property:string',[ defaultValue:mixed])"},
	{'match' =&gt; ".store", 'display' =&gt; "store('key:string', value:mixed)", 'insert' =&gt; "('key:string', value:mixed)"},
	{'match' =&gt; ".eliminate", 'display' =&gt; "eliminate('key:string')", 'insert' =&gt; "('key:string')"},
	{'match' =&gt; ".addEvent", 'display' =&gt; "addEvent('type:string', event:function)", 'insert' =&gt; "('type:string', event:function)"},
	{'match' =&gt; ".removeEvent", 'display' =&gt; "removeEvent('type:string', event:function)", 'insert' =&gt; "('type:string', event:function)"},
	{'match' =&gt; ".addEvents", 'display' =&gt; "addEvents(events:object)", 'insert' =&gt; "(events:object)"},
	{'match' =&gt; ".removeEvents", 'display' =&gt; "removeEvents('type:string')", 'insert' =&gt; "('type:string')"},
	{'match' =&gt; ".fireEvent", 'display' =&gt; "fireEvent('type:string', args:mixed)", 'insert' =&gt; "('type:string', args:mixed)"},
	{'match' =&gt; ".cloneEvents", 'display' =&gt; "cloneEvents(from:element, 'type:string')", 'insert' =&gt; "(from:element, 'type:string')"},
	{'match' =&gt; ".getOffsetSize", 'display' =&gt; "getOffsetSize()", 'insert' =&gt; "()"},
	{'match' =&gt; ".getScrollSize", 'display' =&gt; "getScrollSize()", 'insert' =&gt; "()"},
	{'match' =&gt; ".getScroll", 'display' =&gt; "getScroll()", 'insert' =&gt; "()"},
	{'match' =&gt; ".scrollTo", 'display' =&gt; "scrollTo(x:number, y:number)", 'insert' =&gt; "(x:number, y:number)"},
]

currentword = ''+(ENV['TM_CURRENT_WORD'] || '')
currentword.gsub!(/\s+/,'')
currentword.gsub!(/^.*?\./,'.')

TextMate::UI.complete(@choices, {:currentword=&gt;currentword, :case_insensitive=&gt;false})
</string>
	<key>input</key>
	<string>none</string>
	<key>keyEquivalent</key>
	<string>^~</string>
	<key>name</key>
	<string>Moo Completion Test</string>
	<key>output</key>
	<string>showAsTooltip</string>
	<key>scope</key>
	<string>source.js.mootools</string>
	<key>uuid</key>
	<string>6A21D5E1-915B-448D-BE01-2C9D0149AA48</string>
</dict>
</plist>
