<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/ruby
# This command is meant to be used for quick insertion of your LaTeX template files. They should be placed
# in the directory ~/Library/Application Support/LaTeX/Templates. A pop-up is provided, letting you pick
# the template file you want inserted, and then it gets inserted as a snippet. See
# http://macromates.com/textmate/manual/snippets#snippets for what this implies.
require ENV['TM_SUPPORT_PATH'] + '/lib/osx/plist'
require ENV['TM_SUPPORT_PATH'] + '/lib/exit_codes.rb'
require ENV['TM_SUPPORT_PATH'] + '/lib/ui.rb'
require ENV['TM_SUPPORT_PATH'] + '/lib/escape.rb'
path = ENV['HOME'] + '/Library/Application Support/LaTeX/Templates/'
[{"a" =&gt; "2", "b" =&gt; "5"}, {"a" =&gt; "1", "b" =&gt; "4"}].to_plist
unless FileTest.directory?(path) then
  TextMate.exit_show_tool_tip "You need to create the directory #{path} first and\n populate it with your favorite LaTeX template files before using this command."
else
  files = `ls "#{path}"`.split("\n")
  TextMate.exit_show_tool_tip "You need to populate the template directory with some template files!" if files.empty?
  entries = files.map do |file|
    content = File.read(path + file)
    { "filename" =&gt; file, "content" =&gt; content}
  end
params = { "entries" =&gt; entries }
  dialog = ENV['DIALOG']
  return_plist = `"#{dialog}" -cmp #{e_sh params.to_plist} #{e_sh(ENV['TM_BUNDLE_SUPPORT'] + '/nibs/LaTeXTemplate.nib')}`
  return_hash = OSX::PropertyList::load(return_plist)['result']
	TextMate.exit_discard if return_hash.nil?
	text = return_hash['returnArgument'][0].scan(/\n|.+\n?/)
  first_line = text[0]
# The user can force the template to be interpreted as a snippet, by
# adding this line: #!TEX style=snippet
  if first_line.match(/^%!TEX\s+style\s*=\s*snippet\s*/) then
    TextMate.exit_insert_snippet(text[1..-1])
  else
    print(text.join(""))
  end
end
</string>
	<key>input</key>
	<string>none</string>
	<key>name</key>
	<string>LaTeX Template</string>
	<key>output</key>
	<string>afterSelectedText</string>
	<key>scope</key>
	<string>text.tex.latex</string>
	<key>tabTrigger</key>
	<string>temp</string>
	<key>uuid</key>
	<string>0E901597-FFB6-4D81-A57D-821A9B5089A5</string>
</dict>
</plist>
