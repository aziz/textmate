<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>bundleUUID</key>
	<string>4679484F-6227-11D9-BFB1-000D93589AF6</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby

if `defaults read /System/Library/CoreServices/SystemVersion ProductVersion` !~ /10\.4\..*/
  require ENV['TM_BUNDLE_SUPPORT'] + '/lib/docset_query.rb'
  documentation_for_selector
  exit
end

line = STDIN.read
caret_placement = 0
tmp = ENV['TM_LINE_NUMBER'].to_i - ENV['TM_INPUT_START_LINE'].to_i
if tmp &gt; 0
class String
  def index_of_nth_occurrence_of(n, ch)
    self.unpack("U*").each_with_index do |e, i|
      return i if e == ch &amp;&amp; (n -= 1) == 0
    end
    return -1
  end
end
  caret_placement += line.index_of_nth_occurrence_of(tmp,?\n) + ENV['TM_LINE_INDEX'].to_i
else
  caret_placement =ENV['TM_LINE_INDEX'].to_i-ENV['TM_INPUT_START_LINE_INDEX'].to_i - 1
end

def match_iter(rgxp,str)
  offset = 0
  while m = str.match(rgxp)
    yield [m[0], m.begin(0) + offset, m[0].length]
    str = m.post_match
    offset += m.end(0)
  end
end

def loadHTMLPage(url,className,methodName, ref)
  className = "NSObject" if ref
  m = open(url).read.match(/(\#\/\/apple_ref\/[^"]+?\/#{className}\/#{methodName})"/)
  url += m[1] if m
  TextMate.exit_show_html "&lt;meta http-equiv='Refresh' content='0;URL=tm-file://#{url}'&gt;"
end

pat = /("(\\.|[^"\\])*"|\[|\]|@selector\([^\)]*\)|[a-zA-Z][a-zA-Z0-9]*:)/

up = 0
start = [0]
#Count [
match_iter(pat , line[0..caret_placement]) do |tok, beg, len|
  t = tok[0].chr
  if t == "["
    start &lt;&lt; beg
  elsif t == "]"
    start.pop
  end
end

up = 0
last = line.length
match_iter(pat , line[caret_placement+1..line.length]) do |tok, beg, len|
  t = tok[0].chr
  if t == "["
    up +=1
  elsif t == "]"
    if up == 0
      last = beg + caret_placement
      break
    end
    up -=1
  end
end

up =-1
list = ""
if line.match(/^(-|\+)/)
  start[-1] = 0
  last = line.length
  up = 0
end

match_iter(pat , line[start[-1]..last]) do |tok, beg, len|
  t = tok[0].chr
  if t == "["
    up +=1
  elsif t == "]"
    up -=1
  elsif t !='"' and t !='@' and up == 0
    list &lt;&lt; tok
  end
end

if list == ""
  m = line[start[-1]..last].match(/([a-zA-Z][a-zA-Z0-9]*:?)\s*(;)?$/)
  if m
    list = m[1]
    last = m.begin(0)
  end
end

require "#{ENV['TM_SUPPORT_PATH']}/lib/escape"
zGrepped = %x{ zgrep ^#{e_sh list + "[[:space:]]"} #{e_sh ENV['TM_BUNDLE_SUPPORT']}/cocoa.txt.gz }
candidates = zGrepped.split("\n") #.map{|e| e.split[1]}
require ENV['TM_SUPPORT_PATH'] + "/lib/exit_codes.rb"
TextMate.exit_show_tool_tip "No documentation found for:\n#{list}" if candidates.empty?
if candidates.size &gt; 1 # if more than 1 candidate disambiguate
  m = line[start[-1]..last].match(/^(\[\s*)+([A-Z][a-zA-Z0-9]*)/)
  old = candidates
  if m
    candidates = candidates.select{|e| e.split("\t")[2] == m[2] }

  end
  candidates = old if candidates.empty?
end

if candidates.size &gt; 1
  require "#{ENV['TM_SUPPORT_PATH']}/lib/osx/plist"
  dialog_path = "#{ENV['TM_SUPPORT_PATH']}/bin/tm_dialog"
#pl = {'menuItems' =&gt; prettyCandidates.map { |pretty, full | { 'title' =&gt; pretty, 'cand' =&gt; full} }}  
plist = { 'menuItems' =&gt; candidates.map do |cand|
                        {'title' =&gt; "[#{cand.split("\t")[3].match /[^;]+/} #{cand.split("\t")[0]}]", 'full' =&gt; cand} 
                      end
          }.to_plist
lk = candidates.map do |cand|
                        {'title' =&gt; "[#{cand.split("\t")[3]} #{cand.split("\t")[0]}]", 'full' =&gt; cand} 
                      end


  res = OSX::PropertyList::load(%x{#{e_sh dialog_path} -up #{e_sh plist} })
  if res.has_key? 'selectedMenuItem'
	result = res['selectedMenuItem']['full']
  else
   TextMate.exit_discard  
  end
else
  result = candidates[0]
end

#file:///Developer/ADC%20Reference%20Library/documentation/Cocoa/Reference/ApplicationKit/Classes/NSApplication_Class/Reference/Reference.html#//apple_ref/c/data/NSApplicationDidFinishLaunchingNotification
#file:///Developer/ADC%20Reference%20Library/documentation/Cocoa/Reference/Foundation/Classes/NSObject_Class/Reference/Reference.html#//apple_ref/occ/clm/NSObject/alloc
#file:///Developer/ADC%20Reference%20Library/documentation/GraphicsImaging/Reference/QuartzCoreFramework/Classes/CIColor_Class/Reference/Reference.html#//apple_ref/occ/clm/CIColor/colorWithRed:green:blue:alpha:
#file:///Developer/ADC%20Reference%20Library/documentation/Cocoa/Reference/Foundation/Protocols/NSObject_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSObject/autorelease

ref = false # used for proper HTML anchoring of delegate methods

methodName, framework,behaviors,nsClass, methodType = result.split("\t")
semi = nsClass.index(";")
if semi.nil?
  className = nsClass
else
  className = nsClass[0..semi-1]
  if className == "NSObject" # hopefully this will get most delegate methods right
    className = nsClass[semi + 1 ..-1]
    ref = true
  end
end


  tLeopard = {"AK" =&gt; "/Developer/Documentation/DocSets/com.apple.ADC_Reference_Library.CoreReference.docset/Contents/Resources/Documents/documentation/Cocoa/Reference/ApplicationKit/",
    "F"  =&gt; "/Developer/Documentation/DocSets/com.apple.ADC_Reference_Library.CoreReference.docset/Contents/Resources/Documents/documentation/Cocoa/Reference/Foundation/", 
    "CI" =&gt; "/Developer/ADC Reference Library/documentation/GraphicsImaging/Reference/QuartzCoreFramework/",
  "WK" =&gt; "/Developer/Documentation/DocSets/com.apple.ADC_Reference_Library.CoreReference.docset/Contents/Resources/Documents/documentation/Cocoa/Reference/WebKit/",
    "CD" =&gt; "/Developer/ADC Reference Library/documentation/Cocoa/Reference/CoreDataFramework/",
    "Cl" =&gt; "Classes/#{className}_Class/Reference/",
    "Pr" =&gt; "Protocols/#{className}_Protocol/Reference/",
	"Q" =&gt; "file:///Developer/Documentation/DocSets/com.apple.ADC_Reference_Library.CoreReference.docset/Contents/Resources/Documents/documentation/GraphicsImaging/Reference/QuartzFramework/"
  }

  
t = {"AK" =&gt; "/Developer/ADC Reference Library/documentation/Cocoa/Reference/ApplicationKit/",
  "F"  =&gt; "/Developer/ADC Reference Library/documentation/Cocoa/Reference/Foundation/", 
  "CI" =&gt; "/Developer/ADC Reference Library/documentation/GraphicsImaging/Reference/QuartzCoreFramework/",
"WK" =&gt; "/Developer/ADC Reference Library/documentation/Cocoa/Reference/WebKit/",
  "CD" =&gt; "/Developer/ADC Reference Library/documentation/Cocoa/Reference/CoreDataFramework/",
  "Cl" =&gt; "Classes/#{className}_Class/Reference/",
  "Pr" =&gt; "Protocols/#{className}_Protocol/Reference/", 
}

  url = ""
  url=t[framework] + t[behaviors] unless t[framework].nil?
  if File.exist?(url + "Reference.html")
    url += "Reference.html"
    loadHTMLPage(url,className,methodName,ref)
  elsif File.exist?(url + "#{className}.html")
    url += "#{className}.html"
    loadHTMLPage(url,className,methodName,ref)
  end
  url=tLeopard[framework] + tLeopard[behaviors] unless tLeopard[framework].nil?
  if File.exist?(url + "Reference.html")
    url += "Reference.html"
    loadHTMLPage(url,className,methodName,ref)
  elsif File.exist?(url + "#{className}.html")
    url += "#{className}.html"
    loadHTMLPage(url,className,methodName,ref)
  end
TextMate.exit_show_tool_tip "We found the selector, but the file on disk was not found. Debug info:\n#{result.gsub(/\t/, ',Â ')}"
</string>
	<key>fallbackInput</key>
	<string>scope</string>
	<key>input</key>
	<string>selection</string>
	<key>keyEquivalent</key>
	<string>^h</string>
	<key>name</key>
	<string>Documentation for Selector</string>
	<key>output</key>
	<string>showAsTooltip</string>
	<key>scope</key>
	<string>meta.bracketed.objc | meta.function.objc</string>
	<key>uuid</key>
	<string>8AF46225-833C-473E-8EEC-F21C581636F6</string>
</dict>
</plist>
