<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>if [[ "$(defaults read /System/Library/CoreServices/SystemVersion ProductVersion)" == 10.6.* ]]; then
  "${TM_RUBY:-ruby}" -r"$TM_BUNDLE_SUPPORT/lib/docset_query.rb" -e 'documentation_for_word'
  exit
fi

if [[ "$(defaults read /System/Library/CoreServices/SystemVersion ProductVersion)" == 10.5.* ]]; then
  "${TM_RUBY:-ruby}" -r"$TM_BUNDLE_SUPPORT/lib/docset_query.rb" -e 'documentation_for_word'
  exit
fi

doc_path="/Developer/ADC Reference Library/documentation/Cocoa/Reference"
doc_path2="/Developer/Documentation/DocSets/com.apple.ADC_Reference_Library.CoreReference.docset/Contents/Resources/Documents/documentation/Cocoa/Reference"

if [[ -d "$doc_path2" ]]; then
	doc_path=$doc_path2
fi

word=${TM_SELECTED_TEXT:-$TM_CURRENT_WORD}

# first check our doc_references.txt
reference=$(zgrep -w "^$word" "$TM_BUNDLE_SUPPORT/doc_references.txt.gz"|cut -f2)
if [[ -n "$reference" ]]; then
	file="$doc_path/$reference"
	[[ -f "${file%#*}" ]] &amp;&amp; exit_show_html "&lt;meta http-equiv='Refresh' content='0;URL=tm-file://${file// /%20}'&gt;"
fi

# then see if there's a file named after the word (class)
folders=( "Foundation" "ApplicationKit" "WebKit" )
for (( i = 0; i &lt; ${#folders[@]}; i++ )); do
	file="$doc_path/${folders[$i]}/ObjC_classic/Classes/$word.html"
	[[ -f "$file" ]] &amp;&amp; exit_show_html "&lt;meta http-equiv='Refresh' content='0;URL=tm-file://${file// /%20}'&gt;"
done

# then see if there's a file named after the class in Xcode 2.3 or later
folders=( "Foundation" "ApplicationKit" "WebKit" )
for (( i = 0; i &lt; ${#folders[@]}; i++ )); do
	file="$doc_path/${folders[$i]}/Classes/${word}_Class/index.html"
	[[ -f "$file" ]] &amp;&amp; exit_show_html "&lt;meta http-equiv='Refresh' content='0;URL=tm-file://${file// /%20}'&gt;"
done

# finally try man (PolyglotMan)
try_man () {
	if man -w "$word" &amp;&gt;/dev/null; then
		page=$("$TM_SUPPORT_PATH/bin/html_man.sh" -a "$word")
		echo "&lt;meta http-equiv='Refresh' content='0;URL=tm-file://$page'&gt;"
		exit_show_html
	fi
}

MANSECT=${MANSECT:-2:3:4:5:6:7:8:9} try_man
try_man

echo "Couldn’t find documentation for “${word}”"
</string>
	<key>fallbackInput</key>
	<string>word</string>
	<key>input</key>
	<string>none</string>
	<key>keyEquivalent</key>
	<string>^h</string>
	<key>name</key>
	<string>Documentation for Word / Selection</string>
	<key>output</key>
	<string>showAsTooltip</string>
	<key>scope</key>
	<string>source.c, source.c++, source.objc, source.objc++, (source.objc support | source.objc++ support) - support.function.any-method</string>
	<key>uuid</key>
	<string>2E0F350A-7B23-11D9-B084-000D93589AF6</string>
</dict>
</plist>
